{"version":3,"sources":["css/HostPage.module.css","css/JoinPage.module.css","css/WaitPage.module.css","img/picme-logo.png","../node_modules/jsdom/lib/jsdom sync","../node_modules/jsdom/node_modules/parse5/lib sync","components/Home.js","components/HostPage.js","components/JoinPage.js","components/AnswerSubmit.js","components/Canvas.js","components/HostOrJoin.js","components/HowToPlay.js","components/WaitPage.js","components/Answer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","pinNum","buttonContainer","startButton","cancelButton","userListContainer","userList","inputContainer","nameInputContainer","nameInput","pinInputContainer","pinInput","ButtonContainer","joinButton","joinButtonActivated","leaveButtonContainer","leaveButton","__webpack_require__","p","webpackEmptyContext","req","e","Error","code","keys","resolve","id","Home","react_default","a","createElement","Wrapper","AppLogo","src","logo","react_router_dom","to","Button1","Button2","styled","div","_templateObject","button","_templateObject2","_templateObject3","img","_templateObject4","HostPage","_ref","pin","resetData","users","confirmHost","className","styles","HostPage_AppLogo","Pin","map","user","i","key","onClick","HostPage_Button1","HostPage_Button2","HostPage_templateObject","HostPage_templateObject2","HostPage_templateObject3","HostPage_templateObject4","JoinPage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","resetNamePin","resetJoinButton","kickUsers","react_router","text","JoinPage_AppLogo","Input","placeholder","value","nameValue","type","onChange","name","pinValue","submit","activate","React","Component","JoinPage_templateObject","input","JoinPage_templateObject2","AnswerSubmit","answerValue","handleChangeAnswer","submitAnswer","maxLength","Canvas","targetElement","_sendDrawing","poop","connection","send","JSON","stringify","drawData","_setDrawingData","object","setState","drawingData","_handleChangeAnswer","event","userAnswer","target","_handleSubmit","submittedAnswer","answer","changeClass","toggleAnswers","_chooseAnswer","userAnswers","picked","nextPlayer","activePlayer","selectedAnswer","timerOn","resetUserAnswer","timesUp","_displayRandomPrompts","promptArray","prompts","max","length","Math","floor","random","_hideTimer","playerNumber","disabled","hideGrid","hideCanvas","hideAnswers","saveableCanvas","currentPoints","pointsArray","randomNum","receivedPoint","selectedUser","completed","answerStyle","endGame","_this2","indexOf","originalOnMessage","onmessage","data","parse","_JSON$parse","forEach","setTimeout","hostStatus","console","log","_this3","width","height","Canvas_AppLogo","react_countdown_clock_default","seconds","color","alpha","size","paused","onComplete","Canvas_Wrapper","react_confetti_min_default","run","dist","tool","Tools","Pencil","lineColor","backgroundColor","forceValue","lineWidth","ref","canvasDraw","_sketch","EndButton","setEndGame","toJSON","Canvas_templateObject","Canvas_templateObject2","Canvas_templateObject3","HostOrJoin","handleClickHost","showHost","HostOrJoin_AppLogo","toString","HostOrJoin_Button1","Button3","HostOrJoin_templateObject","HostOrJoin_templateObject2","HostOrJoin_templateObject3","HowToPlay","HowToPlay_Wrapper","HowToPlay_AppLogo","Heading","Text","HowToPlay_Button1","HowToPlay_templateObject","HowToPlay_templateObject2","HowToPlay_templateObject3","HowToPlay_templateObject4","_templateObject5","_templateObject6","WaitPage","error","isLoaded","gifs","gifType","fetch","concat","then","res","json","result","_this$state","message","WaitPage_Wrapper","gameStart","isHost","gif","Gif","images","original","url","WaitPage_templateObject","WaitPage_templateObject2","Link","WaitPage_templateObject3","Answer","answerChoices","App","_login","login","_drawTimeCount","drawEnd","_handleChangeName","gamePin","socketRoomId","joined","_handleChangePin","_resetJoinButton","_handleSubmitJoin","alert","_setPin","roomId","showJoin","resetGame","_resetData","saveRoomId","start","_resetNamePin","_confirmHost","_addAnswerChoice","newAnswer","toConsumableArray","_setEndGame","drawing","redirect","WebSocket","newUsers","roomPin","showHostButton","showJoinButton","basename","exact","path","component","assign","render","JoinPage_JoinPage","components_WaitPage","handleLeave","_leaveWaitPage","Canvas_Canvas","points","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a12766ac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pinNum\":\"HostPage_pinNum__F3vOH\",\"buttonContainer\":\"HostPage_buttonContainer__1xVXo\",\"startButton\":\"HostPage_startButton__1WsH6\",\"cancelButton\":\"HostPage_cancelButton__1crqs\",\"userListContainer\":\"HostPage_userListContainer__3_hEO\",\"userList\":\"HostPage_userList__adNBe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputContainer\":\"JoinPage_inputContainer__3tLNI\",\"nameInputContainer\":\"JoinPage_nameInputContainer__23_yW\",\"nameInput\":\"JoinPage_nameInput__1vjBh\",\"pinInputContainer\":\"JoinPage_pinInputContainer__1pZGm\",\"pinInput\":\"JoinPage_pinInput__1507n\",\"ButtonContainer\":\"JoinPage_ButtonContainer__3WmmV\",\"joinButton\":\"JoinPage_joinButton__-smKi\",\"joinButtonActivated\":\"JoinPage_joinButtonActivated__2cHa_\",\"cancelButton\":\"JoinPage_cancelButton__2TGKu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leaveButtonContainer\":\"WaitPage_leaveButtonContainer__3HcsL\",\"leaveButton\":\"WaitPage_leaveButton__2kxvH\"};","module.exports = __webpack_public_path__ + \"static/media/picme-logo.0ec348c8.png\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 743;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 775;","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport logo from '../img/picme-logo.png';\nimport { Link } from 'react-router-dom';\nimport '../css/App.css';\n\nfunction Home() {\n    return (\n        <Wrapper>\n                <AppLogo src={logo} />\n            <Link to='/host-or-join'>\n                <Button1>start game</Button1>\n            </Link>\n\n            <Link to='/how-to-play'>\n                <Button2>how to play</Button2>\n            </Link>\n        </Wrapper>\n    );\n}\n\nexport default Home;\n\n\n// STYLED COMPONENTS\n\nexport const Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-top: 100px;\n`;\n\n// start game button  \nconst Button1 = styled.button`\n    background-color: #FF2D55;\n    color: white;\n    width: 200px;\n    height: 50px;\n    margin-bottom: 10px;\n    border-radius: 25px;\n    border-color: black;\n    font-family: 'Montserrat';\n    font-weight: bold;\n    font-size: 20px;\n    &:hover {\n        cursor: pointer;\n        background-color: #b82640;;\n        color: white;\n    }\n`;\n\n// how to play button\nexport const Button2 = styled.button`\n    background-color: #5856D6;\n    color: white;\n    width: 200px;\n    height: 50px;\n    margin: 10px;\n    border-radius: 25px;\n    border-color: black;\n    font-family: 'Montserrat';\n    font-weight: bold;\n    font-size: 20px;\n    &:hover {\n        cursor: pointer;\n        background-color: #393898;\n        color: white;\n    }\n`;\n\nconst AppLogo = styled.img`\n    height: 180px;\n    margin-bottom: 80px;\n`\n","import React from 'react';\nimport styles from '../css/HostPage.module.css';\nimport { Link } from 'react-router-dom';\nimport logo from '../img/picme-logo.png';\nimport styled from 'styled-components';\nimport { Wrapper } from './Home';\n\nexport default function HostPage({pin, resetData, users, confirmHost}) {\n    return (\n        <Wrapper>\n            <div className={styles.pinNum}>\n                <AppLogo src={logo} />\n                <h3>join this game using the pin:</h3>\n                <Pin>{pin}</Pin>\n            </div>\n            <div className={styles.userListContainer}>\n                <ul className={styles.userList}>\n                    {users ? users.map((user, i) => (<li key={i}>{users[i]}</li>)) : null}\n                </ul>\n            </div>\n            <div className={styles.buttonContainer}>\n                {users[0] ? <Link to='/canvas' onClick={confirmHost}>\n                    <Button1>start</Button1>\n                </Link> : null}\n                <Link to='/host-or-join' onClick={resetData}>\n                    <Button2>cancel</Button2>\n                </Link>\n            </div>\n        </Wrapper>\n    )\n}\n\nconst AppLogo = styled.img`\n    height: 180px;\n`\nconst Pin = styled.div`\n    font-size: 60px;\n`\n\nexport const Button1 = styled.button`\n    background-color: #FF2D55;\n    color: white;\n    width: 200px;\n    height: 50px;\n    margin-top: 0px;\n    border-radius: 25px;\n    border-color: black;\n    font-family: 'Montserrat';\n    font-weight: bold;\n    font-size: 20px;\n    &:hover {\n        cursor: pointer;\n        background-color: #b82640;;\n        color: white;\n    }\n`;\n\n// how to play button\nexport const Button2 = styled.button`\n    background-color: #5856D6;\n    color: white;\n    width: 200px;\n    height: 50px;\n    margin: 10px;\n    border-radius: 25px;\n    border-color: black;\n    font-family: 'Montserrat';\n    font-weight: bold;\n    font-size: 20px;\n    &:hover {\n        cursor: pointer;\n        background-color: #393898;\n        color: white;\n    }\n`;","import React from 'react';\nimport styles from '../css/JoinPage.module.css';\nimport { Redirect, Link } from 'react-router-dom'; \nimport logo from '../img/picme-logo.png';\nimport styled from 'styled-components';\nimport { Button1 } from './HostPage';\nimport { Wrapper } from './Home';\n\nexport default class JoinPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        }\n    }\n    \n    componentDidMount() {\n        this.props.resetNamePin();\n        this.props.resetJoinButton();\n    }\n\n    render () {\n        return (\n            <Wrapper>\n                { this.props.kickUsers ? <Redirect to='/host-or-join' /> : null}\n                <div className={styles.text}>\n                    <AppLogo src={logo} />\n                </div>\n                <div className={styles.inputContainer}>\n                    <div className={styles.nameInputContainer}>\n                        <Input placeholder={'display name'} value ={this.props.nameValue} className={styles.nameInput} type=\"text\" onChange={this.props.name}/>\n                    </div>\n                    <div className={styles.pinInputContainer}>\n                        <Input placeholder={'game pin'} value={this.props.pinValue} className={styles.pinInput} onChange={this.props.pin}/>\n                    </div>\n                </div>\n            <div className={styles.ButtonContainer}>\n            <Link to= '/wait' onClick={this.props.submit} className={this.props.activate}>\n                <Button1 onClick={this.props.submit} className={styles.joinButton}> join </Button1>\n            </Link>\n            </div>\n        </Wrapper>\n        )\n\n    }\n}\n\n\nconst AppLogo = styled.img`\n    height: 180px;\n    margin-bottom: 30px;\n`\n\nexport const Input = styled.input`\n    margin: 5px;\n    width: 200px;\n    height: 50px;\n    text-align: center;\n    font-size: 18px;\n    font-family: 'Montserrat';\n    background-color: lightgray;\n    outline: none;\n    border-radius: 25px;\n    border: 2px solid black;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Input } from './JoinPage';\nimport { Wrapper, Button2 } from './Home';\n\nexport default function AnswerSubmit({answerValue, handleChangeAnswer, submitAnswer}) {\n    return (\n        <Wrapper>\n            <h3>Enter your answer below!</h3>\n            <Input value={answerValue} className={styled.pinInput} onChange={handleChangeAnswer} maxLength=\"35\"/>\n            <Button2 onClick={submitAnswer}>PIC ME!</Button2>\n        </Wrapper>\n    )\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport logo from '../img/picme-logo.png';\nimport AnswerSubmit from './AnswerSubmit'\nimport ReactCountdownClock from 'react-countdown-clock';\nimport '../css/Canvas.css';\nimport Confetti from 'react-confetti';\nimport { Redirect } from 'react-router-dom';\nimport { SketchField, Tools } from 'react-sketch';\n\nexport default class Canvas extends React.Component {\n    targetElement = null;\n    constructor(props) {\n        super(props);\n        this.state = {\n            saveableCanvas: '',\n            userAnswer: '',\n            drawingData: '',\n            userAnswers: '',\n            submittedAnswer: false,\n            playerNumber: '',\n            activePlayer: 0,\n            currentPoints: 0,\n            pointsArray: '',\n            prompts: ['talking bird', 'bird dog', 'flying panda', 'chicken taco', 'wizard on a pole', 'Seil on a seal', 'airplane pencil', 'aliens telling secrets', 'intelligent soil', 'fighting noodles', 'fake moon landing', 'dog on a boat', 'pitcher of nachos', 'missed high five', 'shakey knees', 'dinosaur baby', 'radishmouse', 'harambae', 'owl in pants', 'a lunch tray on fire', 'banana big toe', 'cat fart', 'lazy zebra', 'crying hyena', 'jake from state farm', 'tony the tiger eating the fruit loops bird', 'running turtle', 'm&m rapping', 'a packet of eminems', 'couch on fire', 'embarassing photo of spongebob', 'christmas tree during halloween', 'crying dinosaur', 'pug on a treadmill', 'pirate in a hammock', 'person with donuts for eyes', 'cowboy on a polar bear', 'flamingo doing ballet', 'coal under pressure', 'shakesbeer', 'souperhero', 'a person under a tack'],\n            randomNum: 0,\n            receivedPoint: false,\n            selectedUser: '',\n            timerOn: true,\n            picked: false, \n            completed: false,\n            disabled: false,\n            hideGrid: false ,\n            timesUp: false,\n            answerStyle: 'answerChoicesShow',\n            endGame: false,\n            resetUserAnswer: false,\n            hideCanvas: 'showMe',\n            hideAnswers: 'hideMe',\n            selectedAnswer: ''\n        }\n    }\n    \n    componentDidMount(){\n        if(this.props.connection) {\n            this.setState({\n                playerNumber:this.props.users.indexOf(this.props.name)\n            })\n\n        const originalOnMessage = this.props.connection.onmessage;\n        this.props.connection.onmessage = (e) => {\n            originalOnMessage(e);\n            const data = JSON.parse(e.data);\n            const {drawData, userAnswers, nextPlayer, pointsArray, timerOn, selectedUser, changeClass, toggleAnswers, selectedAnswer} = JSON.parse(e.data);\n            Object.keys(data).forEach((key) => {\n                switch(key){\n                    case 'selectedAnswer':\n                        this.setState({\n                            selectedAnswer\n                        })\n                    break;\n                    case 'drawData':\n                        this.setState({\n                            drawingData: drawData\n                        })\n                    break;\n                    case 'userAnswers':\n                        if(userAnswers.length >= this.props.users.length -1 && this.state.picked === true) {\n                            this.setState({\n                                userAnswers: '' \n                            })\n                        } else {\n                            this.setState({\n                                userAnswers\n                            })\n                        }\n                        break;\n                    case 'nextPlayer':\n                        this.setState({\n                            receivedPoint: true,\n                            selectedUser,\n                            completed: true\n                        })\n                        \n                        setTimeout(() => {\n                            let max = this.state.prompts.length;\n                            let min = 0;\n                            this.state.randomNum = Math.floor(Math.random() * (+max - +min)) + +min;\n                            this.setState({\n                                hideGrid: false,\n                                disabled: false,\n                                picked:false,\n                                activePlayer: nextPlayer,\n                                submittedAnswer: false,\n                                userAnswers: '',\n                                timerOn: timerOn,\n                                selectedUser: -2,\n                                changeClass: 'answerChoicesHidden',\n                                toggleAnswers: 'answerListHidden',\n                                selectedAnswer: ''\n                            })\n\n                            this.setState({\n                                timerOn: true,\n                                receivedPoint: false,\n                                completed: false,\n                                hideCanvas: 'showMe',\n                                hideAnswers: 'hideMe'\n                            })\n\n                            if (this.props.hostStatus) {\n                                this.setState({\n                                    drawingData: ''\n                                })\n                            }\n                        }, 3000);\n                        break;\n                        // CASE POINTSARRAY\n                        case 'pointsArray':\n                            this.setState({\n                                pointsArray\n                            })\n                            break;\n\n                        case 'changeClass':\n                            this.setState({\n                                changeClass\n                            });\n                            break;\n                        case 'toggleAnswers':\n                            this.setState({\n                                toggleAnswers\n                            })\n                            break;\n                        default:\n                            break;\n                    }\n                })\n            }\n        } else {\n            console.log('no props! Start again from the beginning :)')\n        }\n    }\n    \n    render() {\n        let { drawingData } = this.state;\n        // If statement that checks if the person is a host or not\n        if (this.props.hostStatus){\n            if(this.state.drawingData){\n            }\n        }\n\n        const { width, height } = 400\n\n        return (\n            <div>\n                {this.props.endGame ? <Redirect to=\"/\" /> : null}\n                <div className='logoAndTimer'>\n                    <AppLogo src={logo} />\n                    {/*   Host disabled canvas ternary render  */}\n                    {this.state.timerOn && !this.props.endGame ? <ReactCountdownClock seconds={25}\n                            color=\"#E50066\"\n                            alpha={1}\n                            size={100}\n                            paused={false}\n                            onComplete={this._hideTimer}\n                        /> : null }\n                    </div>\n            <Wrapper> \n                {/* Prompts */}\n                <div>\n                {(this.state.selectedUser === this.state.playerNumber) ? \n                <div>   <Confetti\n                width={width}\n                height={height}\n                run={this.state.completed}\n                /> <h1>You win this round!</h1> </div>  : null}\n                    <p className='promptText'>\n                        {(this.state.activePlayer === this.state.playerNumber) ? `Draw Below: ` + this.state.prompts[this.state.randomNum] : null}\n                    </p>\n                </div>\n                { this.props.hostStatus ?  \n                <div>\n                    <div className='canvasAndAnswers'>\n                            \n                        <SketchField width='400px' \n                            height='400px' \n                            tool={Tools.Pencil} \n                            lineColor='white'\n                            backgroundColor='black'\n                            value={drawingData}\n                            forceValue={true}\n                            lineWidth={3} ref={canvasDraw => {\n                                        (this._sketch = canvasDraw)\n                                        }} />\n                    {/*   User list and user points data render  */}\n                        <div className={this.state.toggleAnswers}>\n                            {this.state.userAnswers ? this.state.userAnswers.map((answer, i )=>(<li key={i}>{answer}</li>)): null}\n                            {this.state.selectedAnswer ?  <li>Picked: {this.state.selectedAnswer}</li> : null}\n                        </div>\n                    </div>\n                    <div>\n                        {/* users and respective points to render on the screen */}\n                        <ul className='users'>\n                            {this.props.users ? this.props.users.map((user, i) => (<li key={i}>{user}: {' '}{this.state.pointsArray[i]}</li>)) : null}\n                        </ul> \n                    </div>\n                    {/* End Game Button */}\n                    <EndButton onClick={() => {\n                        this.props.setEndGame();\n                        this.props.resetData();\n                        this.props.connection.send(JSON.stringify({\n                            userAnswers: '',\n                            selectedAnswer: ''\n                        }));\n                        }}>END GAME</EndButton>\n                </div> : (this.state.activePlayer === this.state.playerNumber && this.state.picked ===false) ?\n                // {/* //  User enabled canvas ternary render */}\n                    <div>\n                            {/* HIDE CANVAS AND HIDE ANSWERS HERE */}\n                             {/* Canvas for ACTIVE PLAYER */}\n                            <div>\n                                {/* <CanvasDraw brushColor={'#000'} lazyRadius={0} brushRadius={3} immediateLoading={true} disabled={this.state.disabled} hideGrid={this.state.hideGrid} ref={canvasDraw => {\n                                    (this.saveableCanvas = canvasDraw)\n                                    }} /> */}\n\n                        {/* Answers for ACTIVE PLAYER */}\n                            <div className={this.state.hideAnswers}>\n                                { (this.state.userAnswers !== '') ? this.state.userAnswers.map((answer, i )=>(<button className={this.state.changeClass} key={i} onClick={this._chooseAnswer} value={answer}>{answer}</button>)) : null}\n                            </div>\n\n                                <div className='canvasBorder'>\n                                <SketchField width='400px' \n                                    height='400px' \n                                    tool={Tools.Pencil} \n                                    lineColor='white'\n                                    backgroundColor='black'\n                                    onChange={() => {this._sendDrawing(this._sketch.toJSON())}}\n                                    lineWidth={3} ref={canvasDraw => {\n                                                (this._sketch = canvasDraw)\n                                    }} />\n                                </div>\n                            </div>\n                        </div> : \n                    // =================== THIS IS THE SECOND CONDITION AFTER ACTIVEPLAYER === PLAYERNUMBER ===================\n                                    // Answer Submit form \n                                    // ================= THIS IS THE CONDITION IF TIME IS NOT UP\n                                    (this.state.activePlayer !== this.state.playerNumber && this.state.submittedAnswer === false && this.state.timesUp === false) ? \n                                        <div> You have 30 seconds to answer! Hurry Up. \n                                            <AnswerSubmit answerValue={this.state.userAnswer} handleChangeAnswer={this._handleChangeAnswer} submitAnswer={this._handleSubmit}/> \n                                        </div>: \n                                            // =============== THIS IS THE CONDITION IF TIME IS UP ===================\n                                            (this.state.activePlayer !== this.state.playerNumber && this.state.submittedAnswer=== false && this.state.timesUp === true) ? \n                                                <div> \n                                                    <AnswerSubmit answerValue={this.state.userAnswer} handleChangeAnswer={this._handleChangeAnswer} submitAnswer={this._handleSubmit}/> \n                                                </div> : \n                                                    // Submitted answer \n                                                    // ============================ THIS IS THE CONDITION IF PLAYER SUBMIT ANSWER ============================\n                                                    (this.state.activePlayer !== this.state.playerNumber && this.state.submittedAnswer === true) ? \n                                                        <div> Submitted answer! Good luck</div> \n                                                        : null\n                                                        // ============== THIS IS vvvvvvvvv THE ENDING BRACE FOR HOST STATUS ==============\n                                                    } \n                </Wrapper>\n            </div>\n        )\n    }\n\n    _sendDrawing = (poop) => {  \n        this.props.connection.send(JSON.stringify({drawData: poop}));\n    }\n\n    _setDrawingData = (object) => {\n        this.setState({\n            drawingData: object,\n        })\n    }\n\n    _handleChangeAnswer =(event)=> {\n        this.setState({\n            userAnswer: event.target.value\n        })\n    }\n\n    _handleSubmit = () => {\n        this.setState({\n            submittedAnswer: true,\n            userAnswer: ''\n        })\n        this.props.connection.send(JSON.stringify({\n            answer: this.state.userAnswer,\n            name: this.props.name,\n            changeClass: 'answerChoicesShow',\n            toggleAnswers: 'answerListShow'}))\n    }\n\n    _chooseAnswer = (event) => {\n        this.setState({\n            userAnswers: '',\n            picked: true,\n        })\n        this.props.connection.send(JSON.stringify({\n            nextPlayer: this.state.activePlayer+1,\n            selectedAnswer: event.target.value,\n            timerOn: false,\n            resetUserAnswer: true,\n            timesUp: false\n        }))\n    }\n\n    _displayRandomPrompts = () => {\n        let promptArray = this.state.prompts;\n        let max = promptArray.length;\n        let min = 0;\n        let randomNum = Math.floor(Math.random() * (+max - +min)) + +min;\n        return promptArray[randomNum];\n    }\n\n    _hideTimer = () => {\n        if(this.state.activePlayer !== this.state.playerNumber && this.state.submittedAnswer === false) {\n            if(this.state.userAnswer === ''){\n                this.props.connection.send(JSON.stringify({\n                    answer: 'lame',\n                    name: this.props.name,\n                    toggleAnswers: 'answerListShow',\n                    changeClass: 'answerChoicesShow',\n                    selectedAnswer: ''\n                }))\n            } else {\n                this.props.connection.send(JSON.stringify({\n                    answer: this.state.userAnswer,\n                    name: this.props.name,\n                    toggleAnswers: 'answerListShow',\n                    changeClass: 'answerChoicesShow',\n                    selectedAnswer: ''\n                }))\n            }\n        }\n\n        this.setState({\n            disabled: true,\n            hideGrid: true,\n            timesUp: true,\n            hideCanvas: 'hideMe',\n            hideAnswers: 'showMe',\n            submittedAnswer: true,\n            userAnswer: '',\n            selectedAnswer: ''\n        })\n    }\n}\n\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    flex-wrap: wrap;\n    background-color: black;\n`;\n    \nconst EndButton = styled.button`\n    background-color: #E50066;\n    color: white;\n    width: 150px;\n    height: 35px;\n    border-color: black;\n    border-radius: 25px;\n    font-family: 'Avenir';\n    font-size: 16px;\n    margin-left: 29%;\n    &:hover {\n        cursor: pointer;\n        background-color: darkred;\n    }\n`;\n\nconst AppLogo = styled.img`\n    height: 100px;\n`\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport logo from '../img/picme-logo.png';\nimport '../css/App.css';\nimport styled from 'styled-components';\nimport { Wrapper, Button2 } from './Home';\n\nfunction generatePin() {\n    let random = Math.floor((Math.random() * 8999) + 1000);\n    let pin = random.toString();\n    return pin;\n}\n\nexport default function HostOrJoin({handleClickHost, showHost, resetData}) {\n    return (\n        <Wrapper>\n                <AppLogo onClick={resetData} src={logo} />\n                {showHost ?\n                <Link onClick={() => (handleClickHost(generatePin()))} to='/host'>\n                    <Button1>host</Button1>\n                </Link> : <div><Button3></Button3></div>}\n                <Link to='/join'>\n                    <Button2>join</Button2>\n                </Link>\n        </Wrapper>\n    )\n}\n\n// STYLED COMPONENTS\n\n// start game button  \nconst Button1 = styled.button`\n    background-color: #FF2D55;\n    color: white;\n    width: 200px;\n    height: 50px;\n    margin-top: 80px;\n    margin-bottom: 10px;\n    border-radius: 25px;\n    border-color: black;\n    font-family: 'Montserrat';\n    font-weight: bold;\n    font-size: 20px;\n    &:hover {\n        cursor: pointer;\n        background-color: #b82640;;\n        color: white;\n    }\n`;\n\nconst Button3 = styled.button`\n    background-color: black;\n    width: 200px;\n    height: 50px;\n    margin-top: 80px;\n    margin-bottom: 10px;\n    border-color: black;\n`;\n\nconst AppLogo = styled.img`\n    height: 180px;\n`\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled, { keyframes } from 'styled-components';\nimport logo from '../img/picme-logo.png';\n\nfunction HowToPlay() {\n  return (\n      <Wrapper>\n              <AppLogo src={logo} />\n        <Heading>How to play</Heading>\n        <Text>\n        Start with connecting one screen as a host. When it's your turn, you'll be given a prompt to draw. As you're drawing, your friends will have to give their best guesses to what you're attempting to draw. Then you'll get to choose your favorite answer out of the bunch. Choose the closest answer or just your fave – player with the most points win!\n        </Text>\n          <Link to='/host-or-join'>\n              <Button1>let's play!</Button1>\n            </Link>\n\n      </Wrapper>\n    );\n}\n\n  export default HowToPlay;\n\n  const Wrapper = styled.div`\n    display: flex; \n    flex-direction: column;\n    align-items: center;\n    padding: 30px;\n  `;\n\n  const Heading = styled.text`\n    font-weight: bold;\n    text-transform: uppercase; \n    text-align: center;\n    font-size: 56px;\n    color: white;\n    margin-bottom: 20px;\n  `;\n\n  const Text = styled.text`\n    text-align: center;\n    font-size: 24px;\n    color: white;\n    padding-right: 30px;\n    padding-left: 30px;\n  `;\n\n  const Button1 = styled.button`\n  background-color: #FF2D55;\n  color: white;\n  width: 200px;\n  height: 50px;\n  margin-top: 50px;\n  margin-bottom: 10px;\n  border-radius: 25px;\n  border-color: black;\n  font-family: 'Montserrat';\n  font-weight: bold;\n  font-size: 20px;\n  &:hover {\n      cursor: pointer;\n      background-color: #b82640;;\n      color: white;\n  }\n`;\n\nconst Button2 = styled.button`\n    background-color: #5856D6;\n    color: white;\n    width: 200px;\n    height: 50px;\n    margin: 10px;\n    border-radius: 25px;\n    border-color: black;\n    font-family: 'Montserrat';\n    font-weight: bold;\n    font-size: 20px;\n    &:hover {\n        cursor: pointer;\n        background-color: #393898;\n        color: white;\n    }\n`;\n\nconst AppLogo = styled.img`\n  height: 80px;\n  margin-bottom: 50px;\n`","import React from 'react';\nimport styles from '../css/WaitPage.module.css';\nimport { Link, Redirect} from 'react-router-dom';\nimport styled from 'styled-components';\n\nclass WaitPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            gifs: [],\n            gifType: ['cat', 'funny', 'start', 'cool', 'fun', 'awesome', 'dancing', 'play', 'games', 'ready', 'yay', 'dance', 'yeet', 'great', 'party', 'waiting', 'loading', 'wait']\n        };\n    }\n    \n    componentDidMount() {\n        let max = this.state.gifType.length;\n        let min = 0;\n        let randomNum = Math.floor(Math.random() * (+max - +min)) + +min;\n\n      fetch(`https://api.giphy.com/v1/gifs/search?q=${this.state.gifType[randomNum]}&api_key=1bfsUoRTBMhc1TV6tyg8jyIc8ddhB23f&limit=1`)\n        .then(res => res.json())\n        .then(\n          (result) => {\n            this.setState({\n              isLoaded: true,\n              gifs: result.data\n            });\n          },\n          (error) => {\n            this.setState({\n              isLoaded: true,\n              error\n            });\n          }\n        )\n    }\n  \n    render() {\n      const { error, isLoaded, gifs } = this.state;\n      if (error) {\n        return <div>Error: {error.message}</div>;\n      } else if (!isLoaded) {\n        return <div>Loading...</div>;\n      } else {\n        return (\n            <Wrapper>\n              {this.props.kickUsers ? <Redirect to=\"/host-or-join\" /> : null}\n                <h1>waiting for host to start game</h1>\n                { this.props.gameStart && !this.props.isHost ? <Redirect to='/canvas' /> : <div></div>}\n                <div className={styles.leaveButtonContainer}>\n                </div>\n        \n                {gifs.map(gif => (\n                    <Gif src={gif.images.original.url} />\n                    ))}\n          </Wrapper>\n        );\n      }\n    }\n  }\n\n  export default WaitPage;\n\n  const Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 50px;\n    text-align: center;\n  `;\n\n  const Gif = styled.img`\n    width: 290px; \n    height: 290px;\n    border-radius: 50%;\n    margin-bottom: 20px;\n  `;\n  \n  const StyledLink = styled(Link)`\n    color: white;\n    text-decoration: none;\n  `;\n  ","import React from 'react';\n\nexport default function Answer({answerChoices}) {\n    return (\n        <div>\n                <ul>\n                    {answerChoices ? answerChoices.map((answer, i) => (<li key={i}>{answer}</li>)) : null}\n                </ul>\n        </div>\n    )\n};\n","import React from 'react';\nimport {\n  Route,\n  HashRouter\n} from 'react-router-dom';\nimport Home from './components/Home';\nimport Canvas from './components/Canvas';\nimport HostPage from './components/HostPage';\nimport JoinPage from './components/JoinPage';\nimport HostOrJoin from './components/HostOrJoin';\nimport HowToPlay from './components/HowToPlay';\nimport WaitPage from './components/WaitPage';\nimport styles from './css/JoinPage.module.css';\nimport Answer from './components/Answer';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      drawingData: '',\n      drawing: '',\n      drawEnd: false,\n      name: '',\n      gamePin: '',\n      roomId: '',\n      saveRoomId: '',\n      socketRoomId: '',\n      users: '',\n      redirect: false,\n      joined: styles.joinButton,\n      isHost: false,\n      answerChoices: ['bird', 'birdDog', 'Flying Panda!'],\n      start: false,\n      pointsArray: '',\n      showHost: true,\n      kickUsers: false,\n      endGame: false,\n      resetGame: false\n    };  \n  }\n\n  componentDidMount() {\n    // const url = `ws://localhost:4000/ws`;\n    const url = `wss://picme.seilcho7.dev/ws`;\n    this.connection = new WebSocket(url);\n\n    this.connection.onmessage = (e) => {\n      const data = JSON.parse(e.data);\n      const {users, newUsers, roomPin, start, pointsArray, showHostButton, kickUsers, showJoinButton, endGame} = JSON.parse(e.data)\n\n      Object.keys(data).forEach((key) => {\n        switch(key){\n          case 'users': \n            this.setState({\n              users: users\n            })\n            break;\n          case 'roomPin': \n            this.setState({\n              socketRoomId: roomPin\n            })\n            break;\n          case 'start': \n            this.setState({\n              start,\n              users: newUsers,\n            })\n            break;\n          case 'pointsArray':\n            this.setState({\n              pointsArray\n            })\n            break;\n          case 'showHostButton':\n            this.setState({\n              showHost: showHostButton\n            })\n            break;\n          case 'kickUsers':\n            this.setState({\n              kickUsers\n            })\n            break;\n          case 'showJoinButton':\n            this.setState({\n              showJoin: showJoinButton\n            })\n            break;\n          case 'endGame':\n            this.setState({\n              endGame\n            })\n            break;\n          default: \n            console.log('Not working - NEW switch')\n            break;\n        }\n      })\n    }\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <HashRouter basename='/'>\n        <Route exact path='/' component={Home} />\n        <Route exact path='/how-to-play' component={HowToPlay} />\n        <Route path=\"/answer\" component={(props) => (\n          <Answer {...props} answerChoices={this.state.answerChoices} />\n        )}/>\n        <Route path='/host-or-join' render={(props) => (\n          <HostOrJoin {...props} resetData={this._resetData} showJoin={this.state.showJoin} isHost={this.state.isHost} handleClickHost={this._setPin} showHost={this.state.showHost} />\n        )} />\n        <Route path='/host' render={(props) => (\n          <HostPage {...props} users={this.state.users} pin={this.state.roomId} resetData={this._resetData} confirmHost={this._confirmHost} />\n        )} />\n        <Route path='/join' render={(props) => (\n          <JoinPage {...props} resetJoinButton={this._resetJoinButton} resetNamePin={this._resetNamePin} kickUsers={this.state.kickUsers} nameValue={this.state.name} name={this._handleChangeName} pinValue={this.state.gamePin} pin={this._handleChangePin} submit={this._handleSubmitJoin} activate={this.state.joined} />\n        )} />\n        <Route path ='/wait' render={(props) =>(\n          <WaitPage {...props} kickUsers={this.state.kickUsers} isHost={this.state.isHost} gameStart={this.state.start} handleLeave={this._leaveWaitPage}/>\n        )} />\n        <Route path ='/canvas' render={(props) =>(\n          <Canvas endGame={this.state.endGame} setEndGame={this._setEndGame} resetData={this._resetData} users={this.state.users} hostStatus={this.state.isHost} connection={this.connection} name={this.state.name} points={this.state.pointsArray}/>\n        )} />\n        </HashRouter>\n      </div>\n    )\n  }\n\n  _login = () => {\n    this.connection.send(JSON.stringify({\n      login: 1\n    }))\n  }\n\n  _drawTimeCount = () => {\n    this.setState({\n      drawEnd: true\n    })\n  }\n  \n  _handleChangeName =(event)=> {\n    this.setState({\n        name: event.target.value\n    })\n    if((this.state.name.length > 0) && this.state.gamePin === this.state.socketRoomId) {\n      this.setState({\n        joined: styles.joinButtonActivated\n      })\n    }\n  }\n\n  _handleChangePin =(event)=> {\n    this.setState({\n        gamePin: event.target.value\n    })\n    if(event.target.value === this.state.socketRoomId && this.state.name.length > 0) {\n      this.setState({\n        joined: styles.joinButtonActivated\n      })\n    }\n  }\n\n  _resetJoinButton = () => {\n    this.setState({\n      joined: styles.joinButton\n    })\n  }\n\n  _handleSubmitJoin = e =>{\n    if (this.state.gamePin === this.state.socketRoomId) {\n      this.connection.send(JSON.stringify({\n        name: this.state.name,\n        gamePin: this.state.gamePin,\n        showHost: this.state.showHost\n      }))\n    } else if(this.state.gamePin !== this.state.socketRoomId){\n      alert(\"WRONG PIN\")\n    }\n  }\n\n  _setPin = (roomId) => {\n    this.setState({\n      roomId: roomId,\n      showHost: false,\n      showJoin: true,\n      kickUsers: false,\n      resetGame: false\n    }, () => {\n      this.connection.send(JSON.stringify({\n        roomId: this.state.roomId,\n        showHost: false,\n        showJoin: true,\n        kickUsers: false,\n        resetGame: false\n      }));\n    })\n  }\n\n  _resetData = () => {\n    this.setState({\n      saveRoomId: '',\n      roomId: '',\n      showHost: true,\n      showJoin: false,\n      kickUsers: true,\n      joined: styles.joinButton,\n      isHost: false,\n      endGame: false,\n      users: [],\n      resetGame: true,\n      start: false\n    }, () => {\n      this.connection.send(JSON.stringify({\n        saveRoomId: '',\n        roomId: '',\n        showJoin: false,\n        showHost: true,\n        kickUsers: true,\n        isHost: false,\n        endGame: false,\n        users: [],\n        resetGame: true,\n        start: false\n      }))\n    })\n  }\n\n  _resetNamePin = () => {\n    this.setState({\n      name: '',\n      gamePin: ''\n    })\n  }\n\n  _confirmHost = () => {\n    this.setState({\n      isHost: true\n    }, () => {\n      this.connection.send(JSON.stringify({\n        start: true, \n        roomId: this.state.socketRoomId\n      }));\n    })\n  }\n\n  _addAnswerChoice = (newAnswer) => {\n    this.setState({\n      answerChoices: [...this.state.answerChoices, newAnswer]\n    })\n    console.log(\"Did you ring?\");\n  }\n\n  _setEndGame = () => {\n    this.setState({\n      endGame: true\n    }, () => {\n      this.connection.send(JSON.stringify({\n        endGame: true\n      }));\n    })\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}